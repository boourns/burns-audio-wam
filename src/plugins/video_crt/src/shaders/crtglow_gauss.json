{"shaders":"7","shader0":"// Parameter lines go here:\n#pragma parameter INPUT_GAMMA \"Input Gamma\" 2.4 2.0 2.6 0.02\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\n\nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\n#ifdef PARAMETER_UNIFORM\n// All parameter floats need to have COMPAT_PRECISION in front of them\nuniform COMPAT_PRECISION float INPUT_GAMMA;\n#else\n#define INPUT_GAMMA 2.4\n#endif\n\nvoid main()\n{\n    vec3 color = COMPAT_TEXTURE(Source, vTexCoord).rgb;\n\n    FragColor  = vec4(pow(color, vec3(INPUT_GAMMA)), 1.0);\n} \n#endif\n","filter_linear0":"false","srgb_framebuffer0":"true","shader1":"// Parameter lines go here:\n#pragma parameter HORIZ_GAUSS_WIDTH \"Horiz Gauss Width\" 0.5 0.0 1.0 0.01\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\nCOMPAT_VARYING COMPAT_PRECISION float data_pix_no;\nCOMPAT_VARYING COMPAT_PRECISION float data_one;\n \nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\n#define vTexCoord TEX0.xy\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n    data_pix_no = vTexCoord.x * SourceSize.x;\n    data_one    = SourceSize.z;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\nCOMPAT_VARYING COMPAT_PRECISION float data_pix_no;\nCOMPAT_VARYING COMPAT_PRECISION float data_one;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\n#ifdef PARAMETER_UNIFORM\n// All parameter floats need to have COMPAT_PRECISION in front of them\nuniform COMPAT_PRECISION float HORIZ_GAUSS_WIDTH;\n#else\n#define HORIZ_GAUSS_WIDTH 0.5\n#endif\n\n#define INV_SQRT_2_PI 0.38 // Doesn't have to be accurate.\n\nvoid main()\n{\n    float texel      = floor(data_pix_no);\n    float phase      = data_pix_no - texel;\n    float base_phase = phase - 0.5;\n    vec2 tex         = vec2((texel + 0.5) * SourceSize.z, vTexCoord.y);\n\n    vec3 col = vec3(0.0);\n    for (float i = -2.0; i <= 2.0; i++)\n    {\n        float phase = base_phase - float(i);\n        float g = INV_SQRT_2_PI * exp(-0.5 * phase * phase / (HORIZ_GAUSS_WIDTH * HORIZ_GAUSS_WIDTH)) / HORIZ_GAUSS_WIDTH;\n        col += COMPAT_TEXTURE(Source, tex + vec2(float(i) * data_one, 0.0)).rgb * g;\n    }\n\n    FragColor = vec4(col, 1.0);\n} \n#endif\n","filter_linear1":"false","scale_type_x1":"viewport","scale_type_y1":"source","scale_x0":"1.0","scale_y0":"1.0","srgb_framebuffer1":"true","shader2":"// Parameter lines go here:\n#pragma parameter BOOST \"Color Boost\" 1.0 0.5 1.5 0.02\n#pragma parameter CRT_GEOM_BEAM \"CRT-Geom Beam\" 1.0 0.0 1.0 1.0\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\nCOMPAT_VARYING vec2 data_pix_no;\nCOMPAT_VARYING COMPAT_PRECISION float data_one;\n\nvec4 _oPosition1; \nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\n#define vTexCoord TEX0.xy\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n\n    data_pix_no = vTexCoord * SourceSize.xy - vec2(0.0, 0.5);\n    data_one    = SourceSize.w;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\nCOMPAT_VARYING vec2 data_pix_no;\nCOMPAT_VARYING COMPAT_PRECISION float data_one;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\n#ifdef PARAMETER_UNIFORM\n// All parameter floats need to have COMPAT_PRECISION in front of them\nuniform COMPAT_PRECISION float BOOST;\nuniform COMPAT_PRECISION float CRT_GEOM_BEAM;\n#else\n#define BOOST 1.0\n#define CRT_GEOM_BEAM 1.0\n#endif\n\nvec3 beam(vec3 color, float dist)\n{\nif (CRT_GEOM_BEAM > 0.5){\n    vec3 wid     = vec3(2.0) + 2.0 * pow(color, vec3(4.0));\n    vec3 weights = vec3(abs(dist) * 3.333333333);\n\n    return 2.0 * color * exp(-pow(weights * inversesqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);\n   }else{\n    float reciprocal_width = 4.0;\n    vec3 x = vec3(dist * reciprocal_width);\n\n    return 2.0 * color * exp(-0.5 * x * x) * reciprocal_width;\n   }\n}\n\nvoid main()\n{\n    vec2  texel = floor(data_pix_no);\n    float phase = data_pix_no.y - texel.y;\n    vec2  tex   = vec2(texel + 0.5) * SourceSize.zw;\n\n    vec3 top    = COMPAT_TEXTURE(Source, tex + vec2(0.0, 0.0 * data_one)).rgb;\n    vec3 bottom = COMPAT_TEXTURE(Source, tex + vec2(0.0, 1.0 * data_one)).rgb;\n\n    float dist0 = phase;\n    float dist1 = 1.0 - phase;\n\n    vec3 scanline = vec3(0.0);\n\n    scanline += beam(top,    dist0);\n    scanline += beam(bottom, dist1);\n\n    FragColor = vec4(BOOST * scanline * 0.869565217391304, 1.0);\n} \n#endif\n","filter_linear2":"false","scale_type2":"viewport","scale2":"1.0","srgb_framebuffer2":"true","shader3":"// Parameter lines go here:\n#pragma parameter GLOW_WHITEPOINT \"Glow Whitepoint\" 1.0 0.5 1.1 0.02\n#pragma parameter GLOW_ROLLOFF \"Glow Rolloff\" 3.0 1.2 6.0 0.1\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\n\nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\n#ifdef PARAMETER_UNIFORM\n// All parameter floats need to have COMPAT_PRECISION in front of them\nuniform COMPAT_PRECISION float GLOW_WHITEPOINT;\nuniform COMPAT_PRECISION float GLOW_ROLLOFF;\n#else\n#define GLOW_WHITEPOINT 1.0\n#define GLOW_ROLLOFF 3.0\n#endif\n\nvoid main()\n{\n    vec3 color  = 1.15 * COMPAT_TEXTURE(Source, vTexCoord).rgb;\n    vec3 factor = clamp(color / GLOW_WHITEPOINT, 0.0, 1.0);\n\n    FragColor = vec4(pow(factor, vec3(GLOW_ROLLOFF)), 1.0);\n} \n#endif\n","filter_linear3":"false","srgb_framebuffer3":"true","shader4":"// Higher value, more centered glow.\n// Lower values might need more taps.\n#define GLOW_FALLOFF 0.35\n#define TAPS 4.0\n\n#define kernel(x) exp(-GLOW_FALLOFF * (x) * (x))\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\n\nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\nvoid main()\n{\n    vec3 col = vec3(0.0);\n    float dx = 4.0 * SourceSize.z; // Mipmapped\n\n    float k_total = 0.0;\n    for (float i = -TAPS; i <= TAPS; i++)\n    {\n        float k  = kernel(i);\n        k_total += k;\n        col     += k * COMPAT_TEXTURE(Source, vTexCoord + vec2(float(i) * dx, 0.0)).rgb;\n    }\n\n    FragColor = vec4(col / k_total, 1.0);\n} \n#endif\n","mipmap_input4":"true","filter_linear4":"true","scale_type4":"source","scale4":"0.25","srgb_framebuffer4":"true","shader5":"// Higher value, more centered glow.\n// Lower values might need more taps.\n#define GLOW_FALLOFF 0.35\n#define TAPS 4.0\n\n#define kernel(x) exp(-GLOW_FALLOFF * (x) * (x))\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\n\nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nCOMPAT_VARYING vec4 TEX0;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\nvoid main()\n{\n    vec3 col = vec3(0.0);\n    float dy = SourceSize.w;\n\n    float k_total = 0.0;\n    for (float i = -TAPS; i <= TAPS; i++)\n    {\n        float k = kernel(i);\n        k_total += k;\n        col += k * COMPAT_TEXTURE(Source, vTexCoord + vec2(0.0, float(i) * dy)).rgb;\n    }\n\n    FragColor = vec4(col / k_total, 1.0);\n} \n#endif\n","filter_linear5":"true","srgb_framebuffer5":"true","shader6":"// Parameter lines go here:\n#pragma parameter BLOOM_STRENGTH \"Glow Strength\" 0.45 0.0 0.8 0.05\n#pragma parameter OUTPUT_GAMMA \"Monitor Gamma\" 2.2 1.8 2.6 0.02\n\n#if defined(VERTEX)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING out\n#define COMPAT_ATTRIBUTE in\n#define COMPAT_TEXTURE texture\n#else\n#define COMPAT_VARYING varying \n#define COMPAT_ATTRIBUTE attribute \n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nCOMPAT_ATTRIBUTE vec4 VertexCoord;\nCOMPAT_ATTRIBUTE vec4 COLOR;\nCOMPAT_ATTRIBUTE vec4 TexCoord;\nCOMPAT_VARYING vec4 COL0;\nCOMPAT_VARYING vec4 TEX0;\n\nvec4 _oPosition1; \nuniform mat4 MVPMatrix;\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\n\nvoid main()\n{\n    gl_Position = MVPMatrix * VertexCoord;\n    COL0 = COLOR;\n    TEX0.xy = TexCoord.xy;\n}\n\n#elif defined(FRAGMENT)\n\n#if __VERSION__ >= 130\n#define COMPAT_VARYING in\n#define COMPAT_TEXTURE texture\nout vec4 FragColor;\n#else\n#define COMPAT_VARYING varying\n#define FragColor gl_FragColor\n#define COMPAT_TEXTURE texture2D\n#endif\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#define COMPAT_PRECISION mediump\n#else\n#define COMPAT_PRECISION\n#endif\n\nuniform COMPAT_PRECISION int FrameDirection;\nuniform COMPAT_PRECISION int FrameCount;\nuniform COMPAT_PRECISION vec2 OutputSize;\nuniform COMPAT_PRECISION vec2 TextureSize;\nuniform COMPAT_PRECISION vec2 InputSize;\nuniform sampler2D Texture;\nuniform sampler2D PassPrev4Texture;\nCOMPAT_VARYING vec4 TEX0;\n\n// compatibility #defines\n#define Source Texture\n#define vTexCoord TEX0.xy\n\n#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize\n#define outsize vec4(OutputSize, 1.0 / OutputSize)\n\n#ifdef PARAMETER_UNIFORM\n// All parameter floats need to have COMPAT_PRECISION in front of them\nuniform COMPAT_PRECISION float BLOOM_STRENGTH;\nuniform COMPAT_PRECISION float OUTPUT_GAMMA;\n#else\n#define BLOOM_STRENGTH 0.45\n#define OUTPUT_GAMMA 2.2\n#endif\n\n// For debugging\n#define BLOOM_ONLY 0\n\nvoid main()\n{\n#if BLOOM_ONLY\n    vec3 source = BLOOM_STRENGTH * COMPAT_TEXTURE(Source, vTexCoord).rgb;\n#else\n\n    vec3 source = 1.15 * COMPAT_TEXTURE(PassPrev4Texture, vTexCoord).rgb;\n    vec3 bloom  = COMPAT_TEXTURE(Source, vTexCoord).rgb;\n    source     += BLOOM_STRENGTH * bloom;\n#endif\n    FragColor = vec4(pow(clamp(source, 0.0, 1.0), vec3(1.0 / OUTPUT_GAMMA)), 1.0);\n} \n#endif\n","filter_linear6":"true"}